name: CI/CD Pipeline for PyPI Publishing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: false
        default: false
        type: boolean
      publish_to_pypi:
        description: 'Publish to PyPI (production)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

env:
  CARGO_TERM_COLOR: always
  DIST_DIR: dist

jobs:
  test:
    name: Run Rust + Python Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Run cargo tests
      run: cargo test --verbose

    - name: Run Clippy linter
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt --all -- --check

  build-wheels:
    name: Build wheels for all platforms
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'workflow_dispatch' && (inputs.publish_to_testpypi || inputs.publish_to_pypi)
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install maturin
      run: pip install maturin

    - name: Build wheels
      run: maturin build --release --out ${{ env.DIST_DIR }} --find-interpreter

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: ${{ env.DIST_DIR }}

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && (inputs.publish_to_testpypi || inputs.publish_to_pypi)
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install maturin
      run: pip install maturin

    - name: Build sdist
      run: maturin sdist --out ${{ env.DIST_DIR }}

    - name: Upload sdist
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: ${{ env.DIST_DIR }}

  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    if: github.event_name == 'workflow_dispatch' && inputs.publish_to_testpypi
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install maturin
      run: pip install maturin

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ${{ env.DIST_DIR }}

    - name: Flatten dist directory
      run: |
        find ${{ env.DIST_DIR }} -name "*.whl" -o -name "*.tar.gz" | xargs -I {} mv {} ${{ env.DIST_DIR }}
        find ${{ env.DIST_DIR }} -type d -empty -delete

    - name: Publish to TestPyPI
      run: |
        maturin publish --repository-url https://test.pypi.org/legacy/ \
                        --username __token__ \
                        --password "${{ secrets.TEST_PYPI_API_TOKEN }}" \
                        --no-sdist \
                        --skip-existing \
                        --non-interactive \
                        --out ${{ env.DIST_DIR }}

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    if: github.event_name == 'workflow_dispatch' && inputs.publish_to_pypi
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install maturin
      run: pip install maturin

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ${{ env.DIST_DIR }}

    - name: Flatten dist directory
      run: |
        find ${{ env.DIST_DIR }} -name "*.whl" -o -name "*.tar.gz" | xargs -I {} mv {} ${{ env.DIST_DIR }}
        find ${{ env.DIST_DIR }} -type d -empty -delete

    - name: Publish to PyPI
      run: |
        maturin publish --username __token__ \
                        --password "${{ secrets.PYPI_API_TOKEN }}" \
                        --no-sdist \
                        --skip-existing \
                        --non-interactive \
                        --out ${{ env.DIST_DIR }}
